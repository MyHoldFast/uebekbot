import os
from datetime import datetime
from functools import wraps
from aiogram import Router
from aiogram.filters import Command
from aiogram.filters.command import CommandObject
from aiogram.types import Message
from utils.dbmanager import DB
from utils.cmd_list import cmds
from utils.StatsMiddleware import get_stats, get_all_chats
from utils.command_states import get_disabled_commands, disable_command, enable_command
from utils.BanMiddleware import (
    ban_user,
    unban_user,
    get_banned_users,
    is_banned,
)

router = Router()
start_time = datetime.now()
ADMIN_ID = os.getenv("ADMIN_ID")


def admin_only(func):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        if str(message.from_user.id) != ADMIN_ID:
            return
        return await func(message, *args, **kwargs)

    return wrapper


def format_uptime():
    uptime = datetime.now() - start_time
    days, remainder = divmod(uptime.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)
    return (
        f"Uptime: {int(days)} days, {int(hours)} hours, {int(minutes)} minutes"
    )


@router.message(Command("uptime", ignore_case=True))
@admin_only
async def cmd_uptime(message: Message):
    await message.reply(format_uptime())


@router.message(Command("ban"))
@admin_only
async def cmd_ban(message: Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    else:
        args = message.text.split()
        if len(args) < 2 or not args[1].isdigit():
            return await message.reply(
                "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
        user_id = int(args[1])

    if str(user_id) == ADMIN_ID:
        return await message.reply("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")

    if is_banned(user_id):
        return await message.reply("‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–Ω–µ.")

    ban_user(user_id, message.reply_to_message.from_user.full_name)
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω!")


@router.message(Command("unban"))
@admin_only
async def cmd_unban(message: Message):
    args = message.text.split()
    if len(args) < 2:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
        else:
            return await message.reply(
                "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
    else:
        if not args[1].isdigit():
            return await message.reply(
                "‚ö† –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
        user_id = int(args[1])

    if not is_banned(user_id):
        return await message.reply("‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ.")

    unban_user(user_id)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!")


@router.message(Command("ban_list"))
@admin_only
async def cmd_ban_list(message: Message):
    banned_users = get_banned_users()

    if not banned_users:
        return await message.reply("‚úÖ –í –±–∞–Ω–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    banned_text = "\n".join(
        f"üî¥ {user['username']} ({user['uid']})" for user in banned_users
    )

    await message.reply(f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{banned_text}")


@router.message(Command("disable", ignore_case=True))
@admin_only
async def cmd_disable(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /disable start –∏–ª–∏ /disable start global")
        return

    command = args[1].lstrip("/")
    if f"/{command}" not in cmds:
        await message.reply(f"‚ö† –ö–æ–º–∞–Ω–¥–∞ /{command} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    is_global = len(args) > 2 and args[2] == "global"

    if is_global:
        await disable_command(command)
        scope = "–≥–ª–æ–±–∞–ª—å–Ω–æ"
    else:
        await disable_command(command, message.chat.id)
        scope = "–≤ —ç—Ç–æ–º —á–∞—Ç–µ"

    await message.reply(f"üö´ –ö–æ–º–∞–Ω–¥–∞ /{command} –æ—Ç–∫–ª—é—á–µ–Ω–∞ {scope}.")

@router.message(Command("enable", ignore_case=True))
@admin_only
async def cmd_enable(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /enable start –∏–ª–∏ /enable start global")
        return

    command = args[1].lstrip("/")
    if f"/{command}" not in cmds:
        await message.reply(f"‚ö† –ö–æ–º–∞–Ω–¥–∞ /{command} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    is_global = len(args) > 2 and args[2] == "global"

    if is_global:
        await enable_command(command)
        scope = "–≥–ª–æ–±–∞–ª—å–Ω–æ"
    else:
        await enable_command(command, message.chat.id)
        scope = "–≤ —ç—Ç–æ–º —á–∞—Ç–µ"

    await message.reply(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{command} –≤–∫–ª—é—á–µ–Ω–∞ {scope}.")

@router.message(Command("commands"))
@admin_only
async def cmd_list_disabled(message: Message):
    disabled_commands = get_disabled_commands()
    chat_id = str(message.chat.id)

    global_disabled = "\n".join([f"üåç /{cmd}" for cmd in disabled_commands["global"]]) or "–ù–µ—Ç"
    chat_disabled_dict = disabled_commands["chat"].get(chat_id, {})
    chat_disabled = "\n".join([f"üí¨ /{cmd}" for cmd in chat_disabled_dict]) or "–ù–µ—Ç"

    await message.reply(
        f"üö´ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        f"–ì–ª–æ–±–∞–ª—å–Ω–æ:\n{global_disabled}\n\n"
        f"–í —ç—Ç–æ–º —á–∞—Ç–µ:\n{chat_disabled}"
    )


@router.message(Command("stop", ignore_case=True))
@admin_only
async def cmd_stop(message: Message):
    os._exit(0)


@router.message(Command("trunc", ignore_case=True))
@admin_only
async def cmd_trunc(message: Message, command: CommandObject):
    db_list = [
        "gpt_models",
        "gpt_context",
        "qwen_context",
        "stats",
        "command_states",
        "banned_users",
        "chats"
    ]

    if not command.args:
        await message.reply(", ".join(db_list))
        return

    if command.args in db_list:
        database = DB(f"db/{command.args}.json").get_db()[0]
        database.truncate()
        await message.reply(f"–ë–∞–∑–∞ {command.args} –æ—á–∏—â–µ–Ω–∞")
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


@router.message(Command("chats", ignore_case=True))
@admin_only
async def cmd_chats(message: Message, command: CommandObject):
    message_text = ""
    all_chats = get_all_chats()
    for chat in all_chats:
        message_text+="\n"+(f"Chat ID: {chat['chat_id']}, Title: {chat['chat_title']}")
    if message_text: await message.reply(message_text)


@router.message(Command("stats", ignore_case=True))
@admin_only
async def cmd_stats(message: Message, command: CommandObject):
    args = command.args.split() if command.args else []

    if len(args) == 1 and args[0].lower() == "yesterday":
        start_date, end_date = "yesterday", "yesterday"
    elif len(args) == 2:
        start_date, end_date = args
    else:
        start_date, end_date = None, None

    date, today_stats, total_stats, earliest_date = get_stats(
        start_date, end_date
    )

    period_text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–∞—Ç—É: {date}\n"
        if start_date == end_date
        else f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}\n"
    )

    today_stats_text = "\n".join(
        f"{cmd}: {today_stats.get(cmd, 0)}" for cmd in cmds
    )
    total_stats_text = "\n".join(
        f"{cmd}: {total_stats.get(cmd, 0)}" for cmd in cmds
    )

    message_text = (
        f"{period_text}\n{today_stats_text}\n\n"
        f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {earliest_date or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∞—Ç—ã'}:\n"
        f"{total_stats_text}"
    )

    await message.reply(message_text)


@router.message(Command("proxy", ignore_case=True))
@admin_only
async def cmd_proxy(message: Message):
    command_args = message.text.split(maxsplit=1)

    if len(command_args) == 1:
        proxy_value = os.getenv("PROXY")
        await message.reply(
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PROXY: {proxy_value}"
            if proxy_value
            else "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è PROXY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
        )
    else:
        new_proxy = command_args[1]
        os.environ["PROXY"] = new_proxy
        await message.reply(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PROXY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_proxy}")
